Prefix(:=<http://www.grsu.by/net/OdTMBaseThreatModel#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.grsu.by/net/OdTMBaseThreatModel>

Declaration(Class(:Boundary))
Declaration(Class(:Checker))
Declaration(Class(:Countermeasure))
Declaration(Class(:DataFlow))
Declaration(Class(:DataStore))
Declaration(Class(:Denial_of_ServiceThreat))
Declaration(Class(:DerivedDataFlow))
Declaration(Class(:Elevation_of_PrivilegeThreat))
Declaration(Class(:ExceptionFlowHasTwoSources))
Declaration(Class(:ExceptionFlowHasTwoTargets))
Declaration(Class(:ExternalInteractor))
Declaration(Class(:FlowException))
Declaration(Class(:FlowMeetsAllRules))
Declaration(Class(:FlowMeetsAnException))
Declaration(Class(:FlowRule))
Declaration(Class(:FlowRuleHasSource))
Declaration(Class(:FlowRuleHasTarget))
Declaration(Class(:Information_DisclosureThreat))
Declaration(Class(:Process))
Declaration(Class(:RepudiationThreat))
Declaration(Class(:STRIDE))
Declaration(Class(:STRIDEThreat))
Declaration(Class(:SecurityMetrics))
Declaration(Class(:SecurityObjective))
Declaration(Class(:SpoofingThreat))
Declaration(Class(:Stencil))
Declaration(Class(:TamperingThreat))
Declaration(Class(:Target))
Declaration(Class(:TemplateDataFlow))
Declaration(Class(:Threat))
Declaration(Class(:TrustBorderBoundary))
Declaration(Class(:TrustLineBoandary))
Declaration(ObjectProperty(:affects))
Declaration(ObjectProperty(:crosses))
Declaration(ObjectProperty(:divides))
Declaration(ObjectProperty(:hasSource))
Declaration(ObjectProperty(:hasTarget))
Declaration(ObjectProperty(:includes))
Declaration(ObjectProperty(:isAffectedBy))
Declaration(ObjectProperty(:isIncluded))
Declaration(ObjectProperty(:isMitigatedBy))
Declaration(ObjectProperty(:isProtectedBy))
Declaration(ObjectProperty(:isSourceOf))
Declaration(ObjectProperty(:isTargetOf))
Declaration(ObjectProperty(:labelsSO))
Declaration(ObjectProperty(:labelsSTRIDE))
Declaration(ObjectProperty(:meetsException))
Declaration(ObjectProperty(:meetsRule))
Declaration(ObjectProperty(:mitigates))
Declaration(ObjectProperty(:protects))
Declaration(NamedIndividual(:FLOWEXCEPTION_has_two_sources))
Declaration(NamedIndividual(:FLOWEXCEPTION_has_two_targets))
Declaration(NamedIndividual(:FLOWRULE_has_source))
Declaration(NamedIndividual(:FLOWRULE_has_target))
Declaration(NamedIndividual(:SO_Authentication))
Declaration(NamedIndividual(:SO_Authorization))
Declaration(NamedIndividual(:SO_Availability))
Declaration(NamedIndividual(:SO_Confidentiality))
Declaration(NamedIndividual(:SO_Integrity))
Declaration(NamedIndividual(:SO_Non-repudiation))
Declaration(NamedIndividual(:STRIDE_Denial_of_Service))
Declaration(NamedIndividual(:STRIDE_Elevation_of_Privilege))
Declaration(NamedIndividual(:STRIDE_Information_Disclosure))
Declaration(NamedIndividual(:STRIDE_Repudiation))
Declaration(NamedIndividual(:STRIDE_Spoofing))
Declaration(NamedIndividual(:STRIDE_Tampering))
############################
#   Object Properties
############################

# Object Property: :affects (:affects)

InverseObjectProperties(:affects :isAffectedBy)

# Object Property: :crosses (:crosses)

InverseObjectProperties(:crosses :divides)

# Object Property: :hasSource (:hasSource)

InverseObjectProperties(:hasSource :isSourceOf)

# Object Property: :hasTarget (:hasTarget)

InverseObjectProperties(:hasTarget :isTargetOf)

# Object Property: :includes (:includes)

InverseObjectProperties(:includes :isIncluded)

# Object Property: :isMitigatedBy (:isMitigatedBy)

InverseObjectProperties(:isMitigatedBy :mitigates)

# Object Property: :isProtectedBy (:isProtectedBy)

InverseObjectProperties(:isProtectedBy :protects)


############################
#   Classes
############################

# Class: :Boundary (:Boundary)

SubClassOf(:Boundary :Stencil)

# Class: :DataFlow (:DataFlow)

SubClassOf(:DataFlow :Stencil)

# Class: :DataStore (:DataStore)

SubClassOf(:DataStore :Target)

# Class: :Denial_of_ServiceThreat (:Denial_of_ServiceThreat)

EquivalentClasses(:Denial_of_ServiceThreat ObjectIntersectionOf(:Threat ObjectHasValue(:labelsSTRIDE :STRIDE_Denial_of_Service)))

# Class: :DerivedDataFlow (:DerivedDataFlow)

SubClassOf(:DerivedDataFlow :DataFlow)

# Class: :Elevation_of_PrivilegeThreat (:Elevation_of_PrivilegeThreat)

EquivalentClasses(:Elevation_of_PrivilegeThreat ObjectIntersectionOf(:Threat ObjectHasValue(:labelsSTRIDE :STRIDE_Elevation_of_Privilege)))

# Class: :ExceptionFlowHasTwoSources (:ExceptionFlowHasTwoSources)

EquivalentClasses(:ExceptionFlowHasTwoSources ObjectIntersectionOf(:DataFlow ObjectMinCardinality(2 :hasSource)))
SubClassOf(:ExceptionFlowHasTwoSources ObjectHasValue(:meetsException :FLOWEXCEPTION_has_two_sources))

# Class: :ExceptionFlowHasTwoTargets (:ExceptionFlowHasTwoTargets)

EquivalentClasses(:ExceptionFlowHasTwoTargets ObjectIntersectionOf(:DataFlow ObjectMinCardinality(2 :hasTarget)))
SubClassOf(:ExceptionFlowHasTwoTargets ObjectHasValue(:meetsException :FLOWEXCEPTION_has_two_targets))

# Class: :ExternalInteractor (:ExternalInteractor)

SubClassOf(:ExternalInteractor :Target)

# Class: :FlowException (:FlowException)

EquivalentClasses(:FlowException ObjectOneOf(:FLOWEXCEPTION_has_two_sources :FLOWEXCEPTION_has_two_targets))
SubClassOf(:FlowException :Checker)

# Class: :FlowMeetsAllRules (:FlowMeetsAllRules)

EquivalentClasses(:FlowMeetsAllRules ObjectIntersectionOf(:DataFlow ObjectHasValue(:meetsRule :FLOWRULE_has_source) ObjectHasValue(:meetsRule :FLOWRULE_has_target)))

# Class: :FlowMeetsAnException (:FlowMeetsAnException)

EquivalentClasses(:FlowMeetsAnException ObjectIntersectionOf(:DataFlow ObjectSomeValuesFrom(:meetsException :FlowException)))

# Class: :FlowRule (:FlowRule)

EquivalentClasses(:FlowRule ObjectOneOf(:FLOWRULE_has_source :FLOWRULE_has_target))
SubClassOf(:FlowRule :Checker)

# Class: :FlowRuleHasSource (:FlowRuleHasSource)

EquivalentClasses(:FlowRuleHasSource ObjectIntersectionOf(:DataFlow ObjectSomeValuesFrom(:hasSource :Target)))
SubClassOf(:FlowRuleHasSource ObjectHasValue(:meetsRule :FLOWRULE_has_source))

# Class: :FlowRuleHasTarget (:FlowRuleHasTarget)

EquivalentClasses(:FlowRuleHasTarget ObjectIntersectionOf(:DataFlow ObjectSomeValuesFrom(:hasTarget :Target)))
SubClassOf(:FlowRuleHasTarget ObjectHasValue(:meetsRule :FLOWRULE_has_target))

# Class: :Information_DisclosureThreat (:Information_DisclosureThreat)

EquivalentClasses(:Information_DisclosureThreat ObjectIntersectionOf(:Threat ObjectHasValue(:labelsSTRIDE :STRIDE_Information_Disclosure)))

# Class: :Process (:Process)

SubClassOf(:Process :Target)

# Class: :RepudiationThreat (:RepudiationThreat)

EquivalentClasses(:RepudiationThreat ObjectIntersectionOf(:Threat ObjectHasValue(:labelsSTRIDE :STRIDE_Repudiation)))

# Class: :STRIDE (:STRIDE)

EquivalentClasses(:STRIDE ObjectOneOf(:STRIDE_Denial_of_Service :STRIDE_Elevation_of_Privilege :STRIDE_Information_Disclosure :STRIDE_Repudiation :STRIDE_Spoofing :STRIDE_Tampering))
SubClassOf(:STRIDE :SecurityMetrics)

# Class: :STRIDEThreat (:STRIDEThreat)

EquivalentClasses(:STRIDEThreat ObjectIntersectionOf(:Threat ObjectSomeValuesFrom(:labelsSTRIDE :STRIDE)))
SubClassOf(:STRIDEThreat :Threat)

# Class: :SecurityObjective (:SecurityObjective)

EquivalentClasses(:SecurityObjective ObjectOneOf(:SO_Authentication :SO_Authorization :SO_Availability :SO_Confidentiality :SO_Integrity :SO_Non-repudiation))
SubClassOf(:SecurityObjective :SecurityMetrics)

# Class: :SpoofingThreat (:SpoofingThreat)

EquivalentClasses(:SpoofingThreat ObjectIntersectionOf(:Threat ObjectHasValue(:labelsSTRIDE :STRIDE_Spoofing)))

# Class: :TamperingThreat (:TamperingThreat)

EquivalentClasses(:TamperingThreat ObjectIntersectionOf(:Threat ObjectHasValue(:labelsSTRIDE :STRIDE_Tampering)))

# Class: :Target (:Target)

SubClassOf(:Target :Stencil)

# Class: :TemplateDataFlow (:TemplateDataFlow)

SubClassOf(:TemplateDataFlow :DataFlow)

# Class: :TrustBorderBoundary (:TrustBorderBoundary)

SubClassOf(:TrustBorderBoundary :Boundary)

# Class: :TrustLineBoandary (:TrustLineBoandary)

SubClassOf(:TrustLineBoandary :Boundary)



)